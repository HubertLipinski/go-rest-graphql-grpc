package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"

	"github.com/HubertLipinski/go-rest-graphql-grpc/internal/graphql/generated"
	"github.com/HubertLipinski/go-rest-graphql-grpc/internal/graphql/models"
	"github.com/HubertLipinski/go-rest-graphql-grpc/internal/repository"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input models.NewTaskInput) (*models.Task, error) {
	panic(fmt.Errorf("not implemented: CreateTask - createTask"))
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTask - deleteTask"))
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context, status *models.TaskStatus, dueDate *string) ([]*models.Task, error) {
	var statusVal, dueDateVal string
	if status != nil {
		statusVal = string(*status)
	}
	if dueDate != nil {
		dueDateVal = *dueDate
	}

	tasks, err := repository.GetAllTasks(r.DB, statusVal, dueDateVal)
	if err != nil {
		return nil, err
	}

	var result []*models.Task
	for _, t := range tasks {
		result = append(result, &models.Task{
			ID:          fmt.Sprint(t.ID),
			Title:       t.Title,
			Description: t.Description,
			Status:      models.TaskStatus(t.Status),
			Priority:    t.Priority,
			DueDate:     t.DueDate.String(),
			CreatedAt:   t.CreatedAt,
			UpdatedAt:   t.UpdatedAt,
		})
	}

	return result, nil
}

// Task is the resolver for the task field.
func (r *queryResolver) Task(ctx context.Context, id string) (*models.Task, error) {
	panic(fmt.Errorf("not implemented: Task - task"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
